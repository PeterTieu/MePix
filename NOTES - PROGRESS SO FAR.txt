PROBLEMS SO FAR:

1: SOLVED
When in the detail view in single-pane layout (i.e. sw < 600dp), when the delete Pic button on the toolbar is pressed, we could use getActivity().finish() to close PixViewPagerActivity and get back to the list view.
However, when in the 2-pane layout (i.e. sw > 600dp), using getActivity().finish() would close the entire app, since we would actually be closing PixListActivity (the activity hosting the 2-pane layout).
The problem becomes - to conserve the previous function (being able to return to the list view when the delete button is pressed in the detail view), but NOT close the app (i.e. close PixListActivity) when this happens in the 2-pane layout!
RESOLUTION: Created a class to keep track of PixViewPagerActivity activity's lifecycle state (PixViewPagerActivityLifecycleTracker). Then used this class' methods to filter the getActivity().finish() call to WHEN and ONLY WHEN PixViePagerActivity is running in the foreground. This means that when PixListActivity is hosting PixDetailFragment, the getActivity().finish() line would not be called.


2:
Having trouble implementing a dialog to confirm the deletion of a Pix when the 'delete Pix' button is pressed on the toolbar (while on detail view). This is because when the "ok" button is pressed, the app crashes


3:
When a picture is chosen from the gallery, there is no problem displaying it on mPictureView ImageView view as a Bitmap while in the detail view. However, there is trouble saving this Gallery picture into the FileProvider, which is done when a picture is taken. This means that whenever the list view or detail view is refreshed, the Pix returns to displaying whatever was previously on the FileProvider (whether it be an empty File (no picture) OR a non-empty File (has picture)).
Hours spent trying to solve this: ~4hr. Tried looking everywhere on StackOverflow!
SUSPICION: MAY NEED TO REQUEST FOR WRITE_INTERNAL_STORAGE at RUNTIME, as we are dealing with a dangerous permission here! To be revisited!


4:
Quite the opposite of problem #3. A Bitmap picture (from mPictureView) could not be saved onto the internal or external storage, so as to later be viewed in Gallery.
Hours spent trying to solve this: ~5hr. Tried looking everywhere on StackOverflow and tried 6-7 snippets of code, but to no avail.
SUSPICION: MAY NEED TO REQUEST FOR WRITE_INTERNAL_STORAGE at RUNTIME, as we are dealing with a dangerous permission here! To be revisited!


5:
There is no way to return anything from the map of MapsActivity (e.g. when user changes the marker location in maps, there is no way to send an intent from this MapsActivity back to the PixDetailFragment activity to return the lat/lon position of the new location of the marker).

Google says that apparently, startActivityForResult(..), setResult(..) and onActivityResult(..) don't apply to MapsActivity. The best way to get a map that is able to return values is by implementing PlacePicker instead of MapsActivity! NOTE FOR FUTURE!

This is what I have tried, but to no avail :(


	In PixDetailFragment:
		getActivity().startActivityForResult(mapsActivityIntent, REQUEST_CODE_NEW_MARKER_LOCATION);
	

	In MapsActivity:
		    	@Override
    			public void onPause(){
        			super.onPause();
        			sendResult(Activity.RESULT_OK, mMarkerLocation.latitude, mMarkerLocation.longitude);
    			}

			
			private void sendResult(int resultCode, double newLatitude, double newLongitude) {
        			Intent intent = new Intent();
        			intent.putExtra(EXTRA_PIX_NEW_LATITUDE, newLatitude);
        			intent.putExtra(EXTRA_PIX_NEW_LONGITUDE, newLongitude);
        			setResult(resultCode, intent);
    			}

	In PixDetailFragment:
			@Override
    			public void onActivityResult(int requestCode, int resultCode, Intent intent) {

        			//If a result code DOES NOT exist
        			if (resultCode != Activity.RESULT_OK) {
            				return;
        			}


				......


				if(requestCode == REQUEST_CODE_NEW_MARKER_LOCATION){
            				double newLatitude = (double) intent.getDoubleExtra(MapsActivity.EXTRA_PIX_NEW_LATITUDE, 0);
            				double newLongitude = (double) intent.getDoubleExtra(MapsActivity.EXTRA_PIX_NEW_LONGITUDE, 0);
            				mPix.setLatitude(newLatitude);
            				mPix.setLongitude(newLongitude);
            				updatePix();
        			}




AND SO MUCH FOR ALL OF THIS (in MapsActivity)....

	mMap.setOnMarkerDragListener(new GoogleMap.OnMarkerDragListener() {

            	@Override
            	public void onMarkerDragStart(Marker marker) {
                	Toast.makeText(MapsActivity.this, "Marker selected", Toast.LENGTH_SHORT).show();
            	}


            	@Override
            	public void onMarkerDrag(Marker marker) {
		}


            	@Override
            	public void onMarkerDragEnd(Marker marker) {
                	mMarkerLocation = marker.getPosition();
                	Toast.makeText(getBaseContext(), "Lat " + mMarkerLocation.latitude + " " + "Long " + mMarkerLocation.longitude, Toast.LENGTH_LONG).show();
                	Log.i(TAG, "Lat " + mMarkerLocation.latitude + " " + "Long " + mMarkerLocation.longitude);
                	mPixLocationMarker.title("Lat inside listener: " + mMarkerLocation.latitude + " " + "Long inside listener: " + mMarkerLocation.longitude);
            	}

        });




6:
Attempted to create Tabs for "All Pixes" and "Favorites"
but to no AVAIL!! App keeps crashing when doing this on all 3-4 samples of tab ViewPager classes:

	@Override
    	public Fragment getItem(int i) {
        	return new PixListFragment();
    	}



